





######################### Importing the stored results ###########################

data = ( pd.concat(map(functools.partial(pd.read_csv, header=None), glob.glob('/content/drive/MyDrive/Results/CelebA_Smile_CVc/*.csv'))) ).to_numpy()

names=['Err2_Results','CV_Results','Wcv_Apprx_Results','Err_ZeroOne_Results','CV_ZeroOne_Results','Wcv_ZeroOne_Apprx_Results' ,'AUC_hat_Results','AUC_corr_Results','AUC_Results' ]
df.columns=names
df['CVc_Apprx']=df.CV_Results+df.Wcv_Apprx_Results
df['CVc_ZeroOne_Apprx']=df.CV_ZeroOne_Results+df.Wcv_ZeroOne_Apprx_Results
df.index =np.arange(len(df)).tolist()


CV_Results=   data[:,1]
Wcv_Apprx_Results= data[:,2]
Err2_Results=data[:,0]

ACCU_hat_Results=   data[:,4]
Wcv_ACCU_Apprx_Results= data[:,5]
ACCU2_Results=data[:,3]

AUC_hat_Results=   data[:,6] # np.hstack((data[0,:],data4[0,:]))   # data[0,:]
AUC_Results= data[:,8]
AUC_corr2_Results= data[:,7]




plt.figure(figsize=(16,5))

plt.subplot(131)
sns.kdeplot(CV_Results, color='blue')
CV_Apprx_corr=CV_Results+Wcv_Apprx_Results
sns.kdeplot(CV_Apprx_corr, color='green')
sns.kdeplot(Err2_Results, color='black',linestyle='dotted')

plt.legend(labels=['CV',r'$\widetilde{CV}_c$','Gen-Err'])
plt.title('Cross-entropy Loss', fontsize=12 )

plt.axvline(x=np.nanmean(CV_Results),linewidth=2, color='blue')
plt.axvline(x=np.mean(CV_Apprx_corr),linewidth=1.5, color='green')
plt.axvline(x=np.mean(Err2_Results),linewidth=2, color='black',linestyle='dotted')

cent=np.mean(CV_Apprx_corr) #TestErr_mean
width=0.06
plt.yticks([])
plt.xlim(cent-width,cent+width)
plt.xlabel('Error', fontsize=10)


plt.subplot(132)
ACCU_Apprx_corr_Results=ACCU_hat_Results+Wcv_ACCU_Apprx_Results

sns.kdeplot(ACCU_hat_Results, color='blue')

sns.kdeplot(ACCU_Apprx_corr_Results, color='green')
sns.kdeplot(ACCU2_Results, color='black',linestyle='dotted')

plt.legend(labels=['CV',r'$\widetilde{CV}_c$','Gen-Err'])
plt.title('Zero-One Loss', fontsize=12 )

plt.axvline(x=np.nanmean(ACCU_hat_Results),linewidth=2, color='blue')
plt.axvline(x=np.nanmean(ACCU_Apprx_corr_Results),linewidth=1.5, color='green')
plt.axvline(x=np.mean(ACCU2_Results),linewidth=2, color='black',linestyle='dotted')


cent=np.nanmean(ACCU_Apprx_corr_Results) #TestErr_mean
width=0.034
plt.yticks([])
plt.xlim(cent-width,cent+width)
plt.xlabel('Error', fontsize=10)




plt.subplot(133)
sns.kdeplot(AUC_hat_Results, color='blue')
sns.kdeplot(AUC_corr2_Results, color='green')
sns.kdeplot(AUC_Results, color='black',linestyle='dotted')
plt.legend(labels=[r'$\widehat{AUC}$',r'$\widetilde{AUC}_c$',r'$AUC$'])

plt.title('AUC Estimates', fontsize=12 )

plt.axvline(x=np.mean(AUC_hat_Results),linewidth=2, color='blue')
plt.axvline(x=np.mean(AUC_corr2_Results),linewidth=1.5, color='green')
plt.axvline(x=np.mean(AUC_Results),linewidth=2, color='black',linestyle='dotted')

cent=np.mean(AUC_Results) #TestErr_mean
width=0.022
plt.xlim(cent-width,cent+width)
plt.xlabel('AUC estimation', fontsize=10)

